--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.10.9) ~  Much Love, Ferib 

]]--

local StrToNumber = tonumber;
local Byte = string.byte;
local Char = string.char;
local Sub = string.sub;
local Subg = string.gsub;
local Rep = string.rep;
local Concat = table.concat;
local Insert = table.insert;
local LDExp = math.ldexp;
local GetFEnv = getfenv or function()
	return _ENV;
end;
local Setmetatable = setmetatable;
local PCall = pcall;
local Select = select;
local Unpack = unpack or table.unpack;
local ToNumber = tonumber;
local function VMCall(ByteString, vmenv, ...)
	local DIP = 1;
	local repeatNext;
	ByteString = Subg(Sub(ByteString, 5), "..", function(byte)
		if (Byte(byte, 2) == 81) then
			local FlatIdent_76979 = 0;
			while true do
				if (FlatIdent_76979 == 0) then
					repeatNext = StrToNumber(Sub(byte, 1, 1));
					return "";
				end
			end
		else
			local FlatIdent_69270 = 0;
			local a;
			while true do
				if (FlatIdent_69270 == 0) then
					a = Char(StrToNumber(byte, 16));
					if repeatNext then
						local b = Rep(a, repeatNext);
						repeatNext = nil;
						return b;
					else
						return a;
					end
					break;
				end
			end
		end
	end);
	local function gBit(Bit, Start, End)
		if End then
			local Res = (Bit / (2 ^ (Start - 1))) % (2 ^ (((End - 1) - (Start - 1)) + 1));
			return Res - (Res % 1);
		else
			local FlatIdent_21DDC = 0;
			local Plc;
			while true do
				if (FlatIdent_21DDC == 0) then
					Plc = 2 ^ (Start - 1);
					return (((Bit % (Plc + Plc)) >= Plc) and 1) or 0;
				end
			end
		end
	end
	local function gBits8()
		local a = Byte(ByteString, DIP, DIP);
		DIP = DIP + 1;
		return a;
	end
	local function gBits16()
		local FlatIdent_6D4CB = 0;
		local a;
		local b;
		while true do
			if (FlatIdent_6D4CB == 1) then
				return (b * 256) + a;
			end
			if (FlatIdent_6D4CB == 0) then
				a, b = Byte(ByteString, DIP, DIP + 2);
				DIP = DIP + 2;
				FlatIdent_6D4CB = 1;
			end
		end
	end
	local function gBits32()
		local a, b, c, d = Byte(ByteString, DIP, DIP + 3);
		DIP = DIP + 4;
		return (d * 16777216) + (c * 65536) + (b * 256) + a;
	end
	local function gFloat()
		local FlatIdent_FA88 = 0;
		local Left;
		local Right;
		local IsNormal;
		local Mantissa;
		local Exponent;
		local Sign;
		while true do
			if (FlatIdent_FA88 == 3) then
				if (Exponent == 0) then
					if (Mantissa == 0) then
						return Sign * 0;
					else
						Exponent = 1;
						IsNormal = 0;
					end
				elseif (Exponent == 2047) then
					return ((Mantissa == 0) and (Sign * (1 / 0))) or (Sign * NaN);
				end
				return LDExp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52)));
			end
			if (FlatIdent_FA88 == 2) then
				Exponent = gBit(Right, 21, 31);
				Sign = ((gBit(Right, 32) == 1) and -1) or 1;
				FlatIdent_FA88 = 3;
			end
			if (FlatIdent_FA88 == 0) then
				Left = gBits32();
				Right = gBits32();
				FlatIdent_FA88 = 1;
			end
			if (FlatIdent_FA88 == 1) then
				IsNormal = 1;
				Mantissa = (gBit(Right, 1, 20) * (2 ^ 32)) + Left;
				FlatIdent_FA88 = 2;
			end
		end
	end
	local function gString(Len)
		local FlatIdent_1013A = 0;
		local Str;
		local FStr;
		while true do
			if (0 == FlatIdent_1013A) then
				Str = nil;
				if not Len then
					Len = gBits32();
					if (Len == 0) then
						return "";
					end
				end
				FlatIdent_1013A = 1;
			end
			if (FlatIdent_1013A == 3) then
				return Concat(FStr);
			end
			if (FlatIdent_1013A == 2) then
				FStr = {};
				for Idx = 1, #Str do
					FStr[Idx] = Char(Byte(Sub(Str, Idx, Idx)));
				end
				FlatIdent_1013A = 3;
			end
			if (FlatIdent_1013A == 1) then
				Str = Sub(ByteString, DIP, (DIP + Len) - 1);
				DIP = DIP + Len;
				FlatIdent_1013A = 2;
			end
		end
	end
	local gInt = gBits32;
	local function _R(...)
		return {...}, Select("#", ...);
	end
	local function Deserialize()
		local Instrs = {};
		local Functions = {};
		local Lines = {};
		local Chunk = {Instrs,Functions,nil,Lines};
		local ConstCount = gBits32();
		local Consts = {};
		for Idx = 1, ConstCount do
			local Type = gBits8();
			local Cons;
			if (Type == 1) then
				Cons = gBits8() ~= 0;
			elseif (Type == 2) then
				Cons = gFloat();
			elseif (Type == 3) then
				Cons = gString();
			end
			Consts[Idx] = Cons;
		end
		Chunk[3] = gBits8();
		for Idx = 1, gBits32() do
			local Descriptor = gBits8();
			if (gBit(Descriptor, 1, 1) == 0) then
				local FlatIdent_475BC = 0;
				local Type;
				local Mask;
				local Inst;
				while true do
					if (FlatIdent_475BC == 3) then
						if (gBit(Mask, 3, 3) == 1) then
							Inst[4] = Consts[Inst[4]];
						end
						Instrs[Idx] = Inst;
						break;
					end
					if (FlatIdent_475BC == 1) then
						Inst = {gBits16(),gBits16(),nil,nil};
						if (Type == 0) then
							Inst[3] = gBits16();
							Inst[4] = gBits16();
						elseif (Type == 1) then
							Inst[3] = gBits32();
						elseif (Type == 2) then
							Inst[3] = gBits32() - (2 ^ 16);
						elseif (Type == 3) then
							local FlatIdent_2A9F7 = 0;
							while true do
								if (FlatIdent_2A9F7 == 0) then
									Inst[3] = gBits32() - (2 ^ 16);
									Inst[4] = gBits16();
									break;
								end
							end
						end
						FlatIdent_475BC = 2;
					end
					if (FlatIdent_475BC == 2) then
						if (gBit(Mask, 1, 1) == 1) then
							Inst[2] = Consts[Inst[2]];
						end
						if (gBit(Mask, 2, 2) == 1) then
							Inst[3] = Consts[Inst[3]];
						end
						FlatIdent_475BC = 3;
					end
					if (FlatIdent_475BC == 0) then
						Type = gBit(Descriptor, 2, 3);
						Mask = gBit(Descriptor, 4, 6);
						FlatIdent_475BC = 1;
					end
				end
			end
		end
		for Idx = 1, gBits32() do
			Functions[Idx - 1] = Deserialize();
		end
		return Chunk;
	end
	local function Wrap(Chunk, Upvalues, Env)
		local Instr = Chunk[1];
		local Proto = Chunk[2];
		local Params = Chunk[3];
		return function(...)
			local Instr = Instr;
			local Proto = Proto;
			local Params = Params;
			local _R = _R;
			local VIP = 1;
			local Top = -1;
			local Vararg = {};
			local Args = {...};
			local PCount = Select("#", ...) - 1;
			local Lupvals = {};
			local Stk = {};
			for Idx = 0, PCount do
				if (Idx >= Params) then
					Vararg[Idx - Params] = Args[Idx + 1];
				else
					Stk[Idx] = Args[Idx + 1];
				end
			end
			local Varargsz = (PCount - Params) + 1;
			local Inst;
			local Enum;
			while true do
				Inst = Instr[VIP];
				Enum = Inst[1];
				if (Enum <= 52) then
					if (Enum <= 25) then
						if (Enum <= 12) then
							if (Enum <= 5) then
								if (Enum <= 2) then
									if (Enum <= 0) then
										local A = Inst[2];
										local Results = {Stk[A](Unpack(Stk, A + 1, Top))};
										local Edx = 0;
										for Idx = A, Inst[4] do
											Edx = Edx + 1;
											Stk[Idx] = Results[Edx];
										end
									elseif (Enum > 1) then
										local FlatIdent_1076E = 0;
										local A;
										local Results;
										local Limit;
										local Edx;
										while true do
											if (1 == FlatIdent_1076E) then
												Top = (Limit + A) - 1;
												Edx = 0;
												FlatIdent_1076E = 2;
											end
											if (FlatIdent_1076E == 2) then
												for Idx = A, Top do
													local FlatIdent_1BCFB = 0;
													while true do
														if (FlatIdent_1BCFB == 0) then
															Edx = Edx + 1;
															Stk[Idx] = Results[Edx];
															break;
														end
													end
												end
												break;
											end
											if (FlatIdent_1076E == 0) then
												A = Inst[2];
												Results, Limit = _R(Stk[A](Stk[A + 1]));
												FlatIdent_1076E = 1;
											end
										end
									else
										local A = Inst[2];
										local Results = {Stk[A](Stk[A + 1])};
										local Edx = 0;
										for Idx = A, Inst[4] do
											local FlatIdent_63AE4 = 0;
											while true do
												if (FlatIdent_63AE4 == 0) then
													Edx = Edx + 1;
													Stk[Idx] = Results[Edx];
													break;
												end
											end
										end
									end
								elseif (Enum <= 3) then
									local FlatIdent_7FAC9 = 0;
									local B;
									while true do
										if (0 == FlatIdent_7FAC9) then
											B = Stk[Inst[4]];
											if not B then
												VIP = VIP + 1;
											else
												Stk[Inst[2]] = B;
												VIP = Inst[3];
											end
											break;
										end
									end
								elseif (Enum > 4) then
									local FlatIdent_455BF = 0;
									local A;
									while true do
										if (FlatIdent_455BF == 0) then
											A = Inst[2];
											Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
											break;
										end
									end
								else
									local FlatIdent_2FD19 = 0;
									local A;
									local Cls;
									while true do
										if (FlatIdent_2FD19 == 0) then
											A = Inst[2];
											Cls = {};
											FlatIdent_2FD19 = 1;
										end
										if (FlatIdent_2FD19 == 1) then
											for Idx = 1, #Lupvals do
												local List = Lupvals[Idx];
												for Idz = 0, #List do
													local FlatIdent_9147D = 0;
													local Upv;
													local NStk;
													local DIP;
													while true do
														if (FlatIdent_9147D == 0) then
															Upv = List[Idz];
															NStk = Upv[1];
															FlatIdent_9147D = 1;
														end
														if (FlatIdent_9147D == 1) then
															DIP = Upv[2];
															if ((NStk == Stk) and (DIP >= A)) then
																local FlatIdent_6D68E = 0;
																while true do
																	if (FlatIdent_6D68E == 0) then
																		Cls[DIP] = NStk[DIP];
																		Upv[1] = Cls;
																		break;
																	end
																end
															end
															break;
														end
													end
												end
											end
											break;
										end
									end
								end
							elseif (Enum <= 8) then
								if (Enum <= 6) then
									Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
								elseif (Enum == 7) then
									local FlatIdent_4A248 = 0;
									local NewProto;
									local NewUvals;
									local Indexes;
									while true do
										if (0 == FlatIdent_4A248) then
											NewProto = Proto[Inst[3]];
											NewUvals = nil;
											FlatIdent_4A248 = 1;
										end
										if (FlatIdent_4A248 == 2) then
											for Idx = 1, Inst[4] do
												VIP = VIP + 1;
												local Mvm = Instr[VIP];
												if (Mvm[1] == 20) then
													Indexes[Idx - 1] = {Stk,Mvm[3]};
												else
													Indexes[Idx - 1] = {Upvalues,Mvm[3]};
												end
												Lupvals[#Lupvals + 1] = Indexes;
											end
											Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
											break;
										end
										if (1 == FlatIdent_4A248) then
											Indexes = {};
											NewUvals = Setmetatable({}, {__index=function(_, Key)
												local Val = Indexes[Key];
												return Val[1][Val[2]];
											end,__newindex=function(_, Key, Value)
												local Val = Indexes[Key];
												Val[1][Val[2]] = Value;
											end});
											FlatIdent_4A248 = 2;
										end
									end
								elseif not Stk[Inst[2]] then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							elseif (Enum <= 10) then
								if (Enum == 9) then
									local A = Inst[2];
									local B = Stk[Inst[3]];
									Stk[A + 1] = B;
									Stk[A] = B[Inst[4]];
								else
									local FlatIdent_17196 = 0;
									local A;
									while true do
										if (FlatIdent_17196 == 0) then
											A = Inst[2];
											Stk[A](Unpack(Stk, A + 1, Inst[3]));
											break;
										end
									end
								end
							elseif (Enum == 11) then
								Stk[Inst[2]][Inst[3]] = Inst[4];
							else
								do
									return Stk[Inst[2]];
								end
							end
						elseif (Enum <= 18) then
							if (Enum <= 15) then
								if (Enum <= 13) then
									if (Stk[Inst[2]] == Stk[Inst[4]]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								elseif (Enum == 14) then
									if (Inst[2] == Stk[Inst[4]]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								else
									Stk[Inst[2]] = Upvalues[Inst[3]];
								end
							elseif (Enum <= 16) then
								do
									return;
								end
							elseif (Enum > 17) then
								Stk[Inst[2]] = Stk[Inst[3]] - Stk[Inst[4]];
							else
								do
									return;
								end
							end
						elseif (Enum <= 21) then
							if (Enum <= 19) then
								local FlatIdent_43626 = 0;
								local A;
								local Results;
								local Limit;
								local Edx;
								while true do
									if (FlatIdent_43626 == 1) then
										Top = (Limit + A) - 1;
										Edx = 0;
										FlatIdent_43626 = 2;
									end
									if (0 == FlatIdent_43626) then
										A = Inst[2];
										Results, Limit = _R(Stk[A](Stk[A + 1]));
										FlatIdent_43626 = 1;
									end
									if (FlatIdent_43626 == 2) then
										for Idx = A, Top do
											Edx = Edx + 1;
											Stk[Idx] = Results[Edx];
										end
										break;
									end
								end
							elseif (Enum == 20) then
								Stk[Inst[2]] = Stk[Inst[3]];
							else
								Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
							end
						elseif (Enum <= 23) then
							if (Enum > 22) then
								Stk[Inst[2]] = Upvalues[Inst[3]];
							elseif (Inst[2] < Stk[Inst[4]]) then
								VIP = Inst[3];
							else
								VIP = VIP + 1;
							end
						elseif (Enum > 24) then
							Stk[Inst[2]] = Stk[Inst[3]];
						else
							VIP = Inst[3];
						end
					elseif (Enum <= 38) then
						if (Enum <= 31) then
							if (Enum <= 28) then
								if (Enum <= 26) then
									Stk[Inst[2]] = Stk[Inst[3]] - Inst[4];
								elseif (Enum == 27) then
									Stk[Inst[2]] = Stk[Inst[3]] - Stk[Inst[4]];
								else
									Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
								end
							elseif (Enum <= 29) then
								local B = Stk[Inst[4]];
								if B then
									VIP = VIP + 1;
								else
									Stk[Inst[2]] = B;
									VIP = Inst[3];
								end
							elseif (Enum == 30) then
								local FlatIdent_957A4 = 0;
								while true do
									if (FlatIdent_957A4 == 0) then
										Stk[Inst[2]] = Inst[3] ~= 0;
										VIP = VIP + 1;
										break;
									end
								end
							elseif Stk[Inst[2]] then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						elseif (Enum <= 34) then
							if (Enum <= 32) then
								local FlatIdent_12544 = 0;
								local B;
								local K;
								while true do
									if (FlatIdent_12544 == 0) then
										B = Inst[3];
										K = Stk[B];
										FlatIdent_12544 = 1;
									end
									if (FlatIdent_12544 == 1) then
										for Idx = B + 1, Inst[4] do
											K = K .. Stk[Idx];
										end
										Stk[Inst[2]] = K;
										break;
									end
								end
							elseif (Enum == 33) then
								Stk[Inst[2]] = Inst[3] - Stk[Inst[4]];
							else
								Stk[Inst[2]] = Env[Inst[3]];
							end
						elseif (Enum <= 36) then
							if (Enum > 35) then
								Stk[Inst[2]] = Env[Inst[3]];
							else
								Stk[Inst[2]][Stk[Inst[3]]] = Inst[4];
							end
						elseif (Enum == 37) then
							Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
						else
							local A = Inst[2];
							do
								return Unpack(Stk, A, A + Inst[3]);
							end
						end
					elseif (Enum <= 45) then
						if (Enum <= 41) then
							if (Enum <= 39) then
								local A = Inst[2];
								do
									return Stk[A](Unpack(Stk, A + 1, Inst[3]));
								end
							elseif (Enum == 40) then
								Stk[Inst[2]][Stk[Inst[3]]] = Inst[4];
							else
								local FlatIdent_74348 = 0;
								local A;
								while true do
									if (FlatIdent_74348 == 0) then
										A = Inst[2];
										Stk[A] = Stk[A](Stk[A + 1]);
										break;
									end
								end
							end
						elseif (Enum <= 43) then
							if (Enum > 42) then
								local B = Stk[Inst[4]];
								if B then
									VIP = VIP + 1;
								else
									Stk[Inst[2]] = B;
									VIP = Inst[3];
								end
							else
								Upvalues[Inst[3]] = Stk[Inst[2]];
							end
						elseif (Enum == 44) then
							Stk[Inst[2]] = Wrap(Proto[Inst[3]], nil, Env);
						elseif (Stk[Inst[2]] == Inst[4]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif (Enum <= 48) then
						if (Enum <= 46) then
							Stk[Inst[2]] = Inst[3] ~= 0;
						elseif (Enum == 47) then
							Stk[Inst[2]] = Stk[Inst[3]] / Inst[4];
						elseif (Stk[Inst[2]] ~= Stk[Inst[4]]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif (Enum <= 50) then
						if (Enum > 49) then
							do
								return Stk[Inst[2]];
							end
						else
							Stk[Inst[2]][Inst[3]] = Inst[4];
						end
					elseif (Enum > 51) then
						local FlatIdent_759F1 = 0;
						local A;
						while true do
							if (0 == FlatIdent_759F1) then
								A = Inst[2];
								Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
								break;
							end
						end
					else
						local FlatIdent_324DE = 0;
						local A;
						local Results;
						local Edx;
						while true do
							if (FlatIdent_324DE == 1) then
								Edx = 0;
								for Idx = A, Inst[4] do
									Edx = Edx + 1;
									Stk[Idx] = Results[Edx];
								end
								break;
							end
							if (0 == FlatIdent_324DE) then
								A = Inst[2];
								Results = {Stk[A](Unpack(Stk, A + 1, Inst[3]))};
								FlatIdent_324DE = 1;
							end
						end
					end
				elseif (Enum <= 79) then
					if (Enum <= 65) then
						if (Enum <= 58) then
							if (Enum <= 55) then
								if (Enum <= 53) then
									local FlatIdent_7909D = 0;
									local A;
									while true do
										if (FlatIdent_7909D == 0) then
											A = Inst[2];
											do
												return Unpack(Stk, A, Top);
											end
											break;
										end
									end
								elseif (Enum == 54) then
									Stk[Inst[2]] = Stk[Inst[3]] * Stk[Inst[4]];
								else
									Stk[Inst[2]] = Inst[3];
								end
							elseif (Enum <= 56) then
								local A = Inst[2];
								local C = Inst[4];
								local CB = A + 2;
								local Result = {Stk[A](Stk[A + 1], Stk[CB])};
								for Idx = 1, C do
									Stk[CB + Idx] = Result[Idx];
								end
								local R = Result[1];
								if R then
									local FlatIdent_64E40 = 0;
									while true do
										if (FlatIdent_64E40 == 0) then
											Stk[CB] = R;
											VIP = Inst[3];
											break;
										end
									end
								else
									VIP = VIP + 1;
								end
							elseif (Enum > 57) then
								local A = Inst[2];
								Stk[A](Stk[A + 1]);
							else
								Stk[Inst[2]] = Inst[3];
							end
						elseif (Enum <= 61) then
							if (Enum <= 59) then
								local A = Inst[2];
								Stk[A] = Stk[A](Stk[A + 1]);
							elseif (Enum > 60) then
								Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
							else
								Stk[Inst[2]] = Stk[Inst[3]] * Stk[Inst[4]];
							end
						elseif (Enum <= 63) then
							if (Enum == 62) then
								local FlatIdent_8D1A5 = 0;
								local A;
								local Results;
								local Edx;
								while true do
									if (0 == FlatIdent_8D1A5) then
										A = Inst[2];
										Results = {Stk[A](Unpack(Stk, A + 1, Top))};
										FlatIdent_8D1A5 = 1;
									end
									if (1 == FlatIdent_8D1A5) then
										Edx = 0;
										for Idx = A, Inst[4] do
											local FlatIdent_6DC53 = 0;
											while true do
												if (0 == FlatIdent_6DC53) then
													Edx = Edx + 1;
													Stk[Idx] = Results[Edx];
													break;
												end
											end
										end
										break;
									end
								end
							else
								Stk[Inst[2]] = Stk[Inst[3]] + Inst[4];
							end
						elseif (Enum > 64) then
							Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
						elseif (Stk[Inst[2]] == Stk[Inst[4]]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif (Enum <= 72) then
						if (Enum <= 68) then
							if (Enum <= 66) then
								local A = Inst[2];
								do
									return Unpack(Stk, A, Top);
								end
							elseif (Enum > 67) then
								local A = Inst[2];
								local C = Inst[4];
								local CB = A + 2;
								local Result = {Stk[A](Stk[A + 1], Stk[CB])};
								for Idx = 1, C do
									Stk[CB + Idx] = Result[Idx];
								end
								local R = Result[1];
								if R then
									local FlatIdent_55D83 = 0;
									while true do
										if (FlatIdent_55D83 == 0) then
											Stk[CB] = R;
											VIP = Inst[3];
											break;
										end
									end
								else
									VIP = VIP + 1;
								end
							else
								Stk[Inst[2]] = Inst[3] - Stk[Inst[4]];
							end
						elseif (Enum <= 70) then
							if (Enum > 69) then
								for Idx = Inst[2], Inst[3] do
									Stk[Idx] = nil;
								end
							else
								local A = Inst[2];
								Stk[A](Unpack(Stk, A + 1, Inst[3]));
							end
						elseif (Enum > 71) then
							if (Stk[Inst[2]] < Stk[Inst[4]]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						else
							local B = Stk[Inst[4]];
							if not B then
								VIP = VIP + 1;
							else
								local FlatIdent_61EE = 0;
								while true do
									if (0 == FlatIdent_61EE) then
										Stk[Inst[2]] = B;
										VIP = Inst[3];
										break;
									end
								end
							end
						end
					elseif (Enum <= 75) then
						if (Enum <= 73) then
							local FlatIdent_89237 = 0;
							local A;
							local Results;
							local Edx;
							while true do
								if (FlatIdent_89237 == 0) then
									A = Inst[2];
									Results = {Stk[A](Stk[A + 1])};
									FlatIdent_89237 = 1;
								end
								if (FlatIdent_89237 == 1) then
									Edx = 0;
									for Idx = A, Inst[4] do
										local FlatIdent_2FBBD = 0;
										while true do
											if (0 == FlatIdent_2FBBD) then
												Edx = Edx + 1;
												Stk[Idx] = Results[Edx];
												break;
											end
										end
									end
									break;
								end
							end
						elseif (Enum > 74) then
							local FlatIdent_90113 = 0;
							local A;
							local Results;
							local Limit;
							local Edx;
							while true do
								if (FlatIdent_90113 == 2) then
									for Idx = A, Top do
										Edx = Edx + 1;
										Stk[Idx] = Results[Edx];
									end
									break;
								end
								if (FlatIdent_90113 == 1) then
									Top = (Limit + A) - 1;
									Edx = 0;
									FlatIdent_90113 = 2;
								end
								if (FlatIdent_90113 == 0) then
									A = Inst[2];
									Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
									FlatIdent_90113 = 1;
								end
							end
						elseif (Stk[Inst[2]] <= Inst[4]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif (Enum <= 77) then
						if (Enum > 76) then
							local FlatIdent_5B2CE = 0;
							local NewProto;
							local NewUvals;
							local Indexes;
							while true do
								if (FlatIdent_5B2CE == 1) then
									Indexes = {};
									NewUvals = Setmetatable({}, {__index=function(_, Key)
										local Val = Indexes[Key];
										return Val[1][Val[2]];
									end,__newindex=function(_, Key, Value)
										local FlatIdent_47ABB = 0;
										local Val;
										while true do
											if (FlatIdent_47ABB == 0) then
												Val = Indexes[Key];
												Val[1][Val[2]] = Value;
												break;
											end
										end
									end});
									FlatIdent_5B2CE = 2;
								end
								if (FlatIdent_5B2CE == 2) then
									for Idx = 1, Inst[4] do
										VIP = VIP + 1;
										local Mvm = Instr[VIP];
										if (Mvm[1] == 20) then
											Indexes[Idx - 1] = {Stk,Mvm[3]};
										else
											Indexes[Idx - 1] = {Upvalues,Mvm[3]};
										end
										Lupvals[#Lupvals + 1] = Indexes;
									end
									Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
									break;
								end
								if (FlatIdent_5B2CE == 0) then
									NewProto = Proto[Inst[3]];
									NewUvals = nil;
									FlatIdent_5B2CE = 1;
								end
							end
						else
							local A = Inst[2];
							do
								return Stk[A](Unpack(Stk, A + 1, Inst[3]));
							end
						end
					elseif (Enum > 78) then
						if (Inst[2] < Stk[Inst[4]]) then
							VIP = Inst[3];
						else
							VIP = VIP + 1;
						end
					else
						local A = Inst[2];
						local Results = {Stk[A](Unpack(Stk, A + 1, Inst[3]))};
						local Edx = 0;
						for Idx = A, Inst[4] do
							Edx = Edx + 1;
							Stk[Idx] = Results[Edx];
						end
					end
				elseif (Enum <= 92) then
					if (Enum <= 85) then
						if (Enum <= 82) then
							if (Enum <= 80) then
								Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
							elseif (Enum > 81) then
								if not Stk[Inst[2]] then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							else
								Stk[Inst[2]] = Stk[Inst[3]] / Inst[4];
							end
						elseif (Enum <= 83) then
							if (Inst[2] == Stk[Inst[4]]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						elseif (Enum == 84) then
							local A = Inst[2];
							local Cls = {};
							for Idx = 1, #Lupvals do
								local List = Lupvals[Idx];
								for Idz = 0, #List do
									local FlatIdent_69253 = 0;
									local Upv;
									local NStk;
									local DIP;
									while true do
										if (0 == FlatIdent_69253) then
											Upv = List[Idz];
											NStk = Upv[1];
											FlatIdent_69253 = 1;
										end
										if (1 == FlatIdent_69253) then
											DIP = Upv[2];
											if ((NStk == Stk) and (DIP >= A)) then
												Cls[DIP] = NStk[DIP];
												Upv[1] = Cls;
											end
											break;
										end
									end
								end
							end
						else
							Stk[Inst[2]] = {};
						end
					elseif (Enum <= 88) then
						if (Enum <= 86) then
							VIP = Inst[3];
						elseif (Enum == 87) then
							Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
						else
							Stk[Inst[2]] = Inst[3] ~= 0;
						end
					elseif (Enum <= 90) then
						if (Enum > 89) then
							for Idx = Inst[2], Inst[3] do
								Stk[Idx] = nil;
							end
						elseif (Stk[Inst[2]] < Stk[Inst[4]]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif (Enum > 91) then
						if (Stk[Inst[2]] == Inst[4]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif (Stk[Inst[2]] <= Inst[4]) then
						VIP = VIP + 1;
					else
						VIP = Inst[3];
					end
				elseif (Enum <= 99) then
					if (Enum <= 95) then
						if (Enum <= 93) then
							local FlatIdent_3121 = 0;
							local A;
							while true do
								if (FlatIdent_3121 == 0) then
									A = Inst[2];
									Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
									break;
								end
							end
						elseif (Enum > 94) then
							Stk[Inst[2]] = Wrap(Proto[Inst[3]], nil, Env);
						else
							local A = Inst[2];
							Stk[A](Stk[A + 1]);
						end
					elseif (Enum <= 97) then
						if (Enum == 96) then
							Stk[Inst[2]] = Stk[Inst[3]] + Inst[4];
						else
							local FlatIdent_6A091 = 0;
							local B;
							local K;
							while true do
								if (1 == FlatIdent_6A091) then
									for Idx = B + 1, Inst[4] do
										K = K .. Stk[Idx];
									end
									Stk[Inst[2]] = K;
									break;
								end
								if (FlatIdent_6A091 == 0) then
									B = Inst[3];
									K = Stk[B];
									FlatIdent_6A091 = 1;
								end
							end
						end
					elseif (Enum > 98) then
						Stk[Inst[2]] = Stk[Inst[3]] - Inst[4];
					else
						local A = Inst[2];
						Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
					end
				elseif (Enum <= 102) then
					if (Enum <= 100) then
						Upvalues[Inst[3]] = Stk[Inst[2]];
					elseif (Enum > 101) then
						Stk[Inst[2]] = Inst[3] ~= 0;
						VIP = VIP + 1;
					else
						Stk[Inst[2]] = {};
					end
				elseif (Enum <= 104) then
					if (Enum > 103) then
						local A = Inst[2];
						local B = Stk[Inst[3]];
						Stk[A + 1] = B;
						Stk[A] = B[Inst[4]];
					elseif (Stk[Inst[2]] ~= Stk[Inst[4]]) then
						VIP = VIP + 1;
					else
						VIP = Inst[3];
					end
				elseif (Enum == 105) then
					if Stk[Inst[2]] then
						VIP = VIP + 1;
					else
						VIP = Inst[3];
					end
				else
					local A = Inst[2];
					local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
					Top = (Limit + A) - 1;
					local Edx = 0;
					for Idx = A, Top do
						local FlatIdent_6D9D2 = 0;
						while true do
							if (FlatIdent_6D9D2 == 0) then
								Edx = Edx + 1;
								Stk[Idx] = Results[Edx];
								break;
							end
						end
					end
				end
				VIP = VIP + 1;
			end
		end;
	end
	return Wrap(Deserialize(), {}, vmenv)(...);
end
return VMCalletFEnv(), ...);
